EXPORT=DISC.IN:COMMAND

Disc(core/DisconnectAfterPacket) OUT -> IN SplitCommands(objects/SplitObject)
SplitCommands(objects/SplitObject) OUT -> IN CommandRouter(routers/GroupRouter)

# Connect to drone and pass the connection to the commands
'' -> IP Connect(ardrone/Connect)
Connect() CLIENT -> IN Drone(core/Split)
Drone() OUT -> STRING DoTakeoff(strings/SendString) OUT -> CLIENT Takeoff(ardrone/Takeoff)
Drone() OUT -> STRING DoLand(strings/SendString) OUT -> CLIENT Land(ardrone/Land)
Drone() OUT -> STRING DoStop(strings/SendString) OUT -> CLIENT Stop(ardrone/Stop)
Drone() OUT -> CLIENT Forward(ardrone/MoveForward)
Drone() OUT -> CLIENT Back(ardrone/MoveBackward)
Drone() OUT -> CLIENT Right(ardrone/MoveRight)
Drone() OUT -> CLIENT Left(ardrone/MoveLeft)
Drone() OUT -> CLIENT Clockwise(ardrone/TurnClockwise)
Drone() OUT -> CLIENT CounterClockwise(ardrone/TurnCounterClockwise)
Drone() OUT -> CLIENT Up(ardrone/MoveDown)
Drone() OUT -> CLIENT Down(ardrone/MoveDown)

# Route commands
'takeoff' -> ROUTE CommandRouter()
'land' -> ROUTE CommandRouter()
'stop' -> ROUTE CommandRouter()
'forward' -> ROUTE CommandRouter()
'back' -> ROUTE CommandRouter()
'right' -> ROUTE CommandRouter()
'left' -> ROUTE CommandRouter()
'clockwise' -> ROUTE CommandRouter()
'counterclockwise' -> ROUTE CommandRouter()
'up' -> ROUTE CommandRouter()
'down' -> ROUTE CommandRouter()
CommandRouter() OUT -> IN DoTakeoff()
CommandRouter() OUT -> IN DoLand()
CommandRouter() OUT -> IN DoStop()
CommandRouter() OUT -> SPEED Forward()
CommandRouter() OUT -> SPEED Back()
CommandRouter() OUT -> SPEED Right()
CommandRouter() OUT -> SPEED Left()
CommandRouter() OUT -> SPEED Clockwise()
CommandRouter() OUT -> SPEED CounterClockwise()
CommandRouter() OUT -> SPEED Up()
CommandRouter() OUT -> SPEED Down()

CommandRouter() MISSED -> IN Show(core/Output)
